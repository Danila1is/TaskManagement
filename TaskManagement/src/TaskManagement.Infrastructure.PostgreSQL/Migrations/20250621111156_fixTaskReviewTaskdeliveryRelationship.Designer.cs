// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TaskManagement.Infrastructure.PostgreSQL;

#nullable disable

namespace TaskManagement.Infrastructure.PostgreSQL.Migrations
{
    [DbContext(typeof(PostgresqlDbContext))]
    [Migration("20250621111156_fixTaskReviewTaskdeliveryRelationship")]
    partial class fixTaskReviewTaskdeliveryRelationship
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TaskManagement.Domain.Tasks.TaskDelivery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<List<string>>("Attachments")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TaskItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeamMemberId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TaskItemId");

                    b.ToTable("TaskDeliveries");
                });

            modelBuilder.Entity("TaskManagement.Domain.Tasks.TaskItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssigneeId")
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<List<string>>("Attachments")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("TaskItems");
                });

            modelBuilder.Entity("TaskManagement.Domain.Tasks.TaskReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<List<string>>("Attachments")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTime>("DateOfInspection")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FeedBack")
                        .HasColumnType("text");

                    b.Property<Guid>("InspectorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskDeliveryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TaskDeliveryId")
                        .IsUnique();

                    b.ToTable("TaskReviews");
                });

            modelBuilder.Entity("TaskManagement.Domain.Teams.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int[]>("Functions")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("TaskManagement.Domain.Teams.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InviteUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("PicturePath")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InviteUrl")
                        .IsUnique();

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("TaskManagement.Domain.Teams.TeamMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("TaskManagement.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.PrimitiveCollection<List<Guid>>("Teams")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TaskManagement.Domain.Tasks.TaskDelivery", b =>
                {
                    b.HasOne("TaskManagement.Domain.Tasks.TaskItem", "TaskItem")
                        .WithMany("TaskDeliveries")
                        .HasForeignKey("TaskItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskItem");
                });

            modelBuilder.Entity("TaskManagement.Domain.Tasks.TaskReview", b =>
                {
                    b.HasOne("TaskManagement.Domain.Tasks.TaskDelivery", "TaskDelivery")
                        .WithOne("TaskReview")
                        .HasForeignKey("TaskManagement.Domain.Tasks.TaskReview", "TaskDeliveryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskDelivery");
                });

            modelBuilder.Entity("TaskManagement.Domain.Teams.Role", b =>
                {
                    b.HasOne("TaskManagement.Domain.Teams.Team", "Team")
                        .WithMany("Roles")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TaskManagement.Domain.Teams.TeamMember", b =>
                {
                    b.HasOne("TaskManagement.Domain.Teams.Role", "Role")
                        .WithMany("TeamMembers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManagement.Domain.Teams.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TaskManagement.Domain.Tasks.TaskDelivery", b =>
                {
                    b.Navigation("TaskReview");
                });

            modelBuilder.Entity("TaskManagement.Domain.Tasks.TaskItem", b =>
                {
                    b.Navigation("TaskDeliveries");
                });

            modelBuilder.Entity("TaskManagement.Domain.Teams.Role", b =>
                {
                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("TaskManagement.Domain.Teams.Team", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("TeamMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
